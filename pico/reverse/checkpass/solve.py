# checkpass -> written in rust
expected = b'\x1f\x99P\xc2\xb8":\xcbE\xa7\xae\xcb\x9e \xcfH\x05{{\xb8\xcd\x99F\xf4\xcf\xe6w\xcd+\xe6w{'

box_size = (1 << 8)
sbox = b'\xa5\xe0\x82\x08h8\x16\xfd\xbd\xad\x14~\xab\x1e\xeb\xa6\xcf67\xcc\xe9\x88O:\xc3\x06]\xaf\x95\x0f\xb3X\x92\xfc\x8c\xe5`+\xc2if"\xb8\r\xef\x84_\xa0\xd7n*\xcbF,\xf1\xb1\xa9\xde\xd5\xb7\xce9b\xe8p\x0c!\xc6d}\xbb\xc1\x98 \x02\xff\x7fUkl\xf4T\xf0V\xc9W\x9d\xd0\xc5\x81Cg\xdf\xf8G\xb5y\x9f<\x1f\x9c\x18\x80\x9a\x8d0\xd9\x94/BP5t\x11\x8eN\xc4\x04\xb0\xe1\\=r\xc7\x19jMI\x03\x15\x91\x99\x1a\x05\xc0\xe7R\x8boY\xf9\x85\xd3\xbc%\xcd\xb6\xdb\xec[{\xf6\xaas\x1d\xfe&A>\xa3S\xedZ4\xea\xac\x17\x90\x103c\xa7\xd2v\xf7\xbe\x83Jz\n\xdcE\xd6H\xee$\xf2D\x121\x1c2\xda^#-\xa8\xa4\x00\x1b@xe|q\xd8\x87\xdd\x01;K\xbf\'am\x0b\xa1\xe3\xd1Q\x9e\xd4\xfb\xae\xfa\xf3\xb4\x0e\xca\x93\t\xc8\xb9\x97uL\xe4\x96?\x9bw\xe6)\x13\x07\xb2.\x89(\xe2\xa2\x8f\x8a\x86\xf5\xbai\x02d\x13K\xd2\xe4\xf5\x84\xec\xc0\xe1H\x12[\x94\xb5\x8b\xedeW\xd0\x0f>7\x88\xd3\xe04\xe8-\x9b\xadF*\x1fY.l\xc8\x0e\xdej\xb6y\x87"\x97\xc5\x14\x19\xdd\xc1\xb7\x90B\xb3\xeb\xe7\x17MU\xfe\r\xf63\xc6\xe6m\xe2\xb1\x03G\xf3&\xfc\x16\x1b\xc2(\x07`\xacv\x8doa\xcbk\x80\x9d\x15\xaf8\xb0\xd1\xd4X=\x83\xfb\xa6\x1a\xa3sx$\xe5A\xea\xcc?\xf9\x8f\xbe\x9fnDI\xbb\xa7L@\xb2\xf21\xca\xd7\xe9\xb8r\xb9T2\\\xd5\xc7J\x11\x08\xbau\xdc\xbd}\x18b\'\x91\x8at\xcd5\x98{\x05\xc3C\xa5\xf1)\xffq\xe3NR%Q\xc4/\x1e\x95\xabfV\x92\x7f\n \xda\x93\xd6\xb49\x10\x9e\xd8\xbc\x04\xce]\x8e\x8c:\xa9\x00\xdf\xfa;ghSz\xa2EO|\x06\xa4\x81\x1c\x89\xd9\xa0,!\x96\xa1_w\xae\x86\x82\x9c\xaa\xf4\xdb\xcf\xbf\xa8c\xf8\x0b\t<\xc9\xef\xf0+Z\xee\x99\x010\x85^~6\x1d\xfdPp\x0c\x9a#\xf7\xcej\xeb\xc5G\x16\xe8\xdc\x8c9\xaf\xb3\x1f\xc3h~\xfd\x10\xda<\x1e\x15W\xa3\xe3\xa8N\x05\nvt\xe0\x97w\x93\x9f{q1\xf5;\xac\xb4\x9b\xc6^\x9a7"\x01\xd4\x99\x87\xe4\xad\xa7k$\x14db\xeaR|8\\\xcc\xfc#TH%\t\x95.\xb14\xe1\xff\x17:\xef\xc9P>\xfbr\xd0M*K\xa6\xf4\x85\xca\x000\xc1lF5\xdd\x84\x94/V\xe9mU\x06\x8b6\x9e]\xd5?\x90`g\xf6\x88\xb0y\xd8\xa1\xfa\x02\x8dI\xf1\x81\x82\xb9Ci\xee[\x04\xe2a\x0e\xb7\xc0\xf0(\xa9s\x83\x1c\xbeL\x13u\x91\x1b\xcd\xbd\x7f\x0c\x86\x1a\xa4\xd2\x8a\xf7DE\xab2B\xcf\xde\x19\x8eOon\xc7\xb8\xed\xa5A\xc8)\r\x96Yc\xd6\xba\xf8=\xdb\x9dx\x98&\xa2\xfe,\xbc\'\x89\x03Q\xd3\x11\xd9e\xe7\xe63\x0f\x92\xb5\x9c\xbf\xcb\x18p\xc4\x07\xae}\xb2-\x8f\xc2 \xf2\xaa@\xd7\x12\x1d\xb6XZ\xa0+J\xf3\x0b\xf9_\x08\xdfz\xecf\xbb\xe5S\xd1!\x80\x11\x83Mo\x1a\n\x915_>\x80\x14\xa9\xda\xf6U\xd4\xe0\x01\xaew\t!e\x9b\xaaV\xa2p\x10\xbe\x86\xf1\x13u\x19\x1eg\x07\xf2\x95%|i\xef\xfeD\x0fq\xc3\xed\xeej\xa7\xd0\xb2LY,\xe3/\x96\x7f\xe2\xa5\xe9\xcc+\x0cv\xc8\x94I\xbb\x17\x02\xec\x8cd\x0b\x04\xcb\xba\xa6\x1bO\x15y\x97\x82A\xbdtK\xb9b\xe6\xc7\xc0TP\x93\xf7\xa0\x00\xe7\xac\x03\xdcZ\xe5\xc1\x1d~<*J\xd6l\xd9\xdb\xb3\xa3GQ \x06[\xff\x99)\xfd\xc4\xa1\xfb\x85\xb1\xde(\xddf4X$\xc5\x8d\xea\xc6`\xf3\xe1\x9f\xcf#\xaf.@\\}\x18\xc2s\xcd\xadC\x81\x90"^-\xb5\xf5\xf0\x98&\xd3\xf9k\xb4\xd5\x1c\x1f9\x9e\xb6\x9c\x88E\xd2=\xa8R\xd1F\x16\xca\xf4nxh\x088\x89\xc9\x92\r\xab\xb06\xdf:c\xfa\'\xbc\xa4\xb82N\x0e{rmS]\xd7\x8e7W0\x87\xebB\x12\x9a\xbf;\xe8\xe4\xb7?a\xce\x05\xd8\xfc\xf81\x84\x9d3\x8bz\x8fH\x8a'
sbox = [sbox[i :i + box_size] for i in range(0, len(sbox), box_size)]

tmp = b'\x0b\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00'
tmp = [tmp[i] for i in range(0, len(tmp), 8)]
tmp = [tmp[i:i + 32] for i in range(0, len(tmp), 32)]

def compute(input, idx):
    v6 = [sbox[idx][b] for b in input]
    output = [v6[tmp[idx][i]] for i in range(32)]
    return output

def compute_all(input):
    _t = compute(input, 0)
    _t = compute(_t, 1)
    _t = compute(_t, 2)
    _t = compute(_t, 3)
    return _t

_d = {}
for i in range(256):
    k = compute_all([i] * 32)
    _d[k[0]] = i

print (_d)
ans_comb = [_d[i] for i in expected]
# print (ans_comb)
# print (''.join(chr(i) for i in ans_comb))

print (ans_comb)
print (compute_all(ans_comb))
print ([i for i in expected])

# while True:
#     # ans = [0 for _ in range(32)]
#     # current = compute_all(ans_comb)
#     # for i in range(32):
#     #     e = current[i]
#     #     f = _d[e]
#     #     idx = ans_comb.index(f)
#     #     while True:
#     #         if ans[idx] == 0:
#     #             ans[idx] = f
#     #             break
#     #         else:
#     #             idx = ans_comb.index(f, idx + 1)
#     # print (ans)
#     # print (compute_all(ans))
#     # print ([i for i in expected])
#     # input()
#     # ans_comb = [i for i in ans]
#     ans = [int(i) for i in input().split(',')]
#     c = compute_all(ans)
#     print (c)
#     print ([i for i in expected])

ans = [116, 49, 109, 105, 110, 103, 83, 49, 100, 101, 67, 104, 97, 110, 110, 51, 108, 95, 57, 71, 114, 82, 104, 80, 100, 81, 103, 74, 57, 88, 71, 105]
_c = compute_all(ans)
c = b''.join([bytes([i]) for i in _c])
assert(c == expected)
print (''.join([chr(i) for i in ans]))


